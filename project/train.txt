from sklearn.linear_model import LogisticRegression
import argparse
import os
import numpy as np
from sklearn.metrics import mean_squared_error
import joblib
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
import pandas as pd
from azureml.core.run import Run
from azureml.data.dataset_factory import TabularDatasetFactory
from azureml.core import Dataset

ds= TabularDatasetFactory.from_delimited_files(path="https://raw.githubusercontent.com/purunep/Capstone/main/project/data/diabetes.csv")

def clean_data(data):
   
    # Clean and one hot encode data
    x_df = data.to_pandas_dataframe().dropna()
    y_df = x_df.pop("Outcome")
    return x_df, y_df

x, y = clean_data(ds)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=42)

run = Run.get_context()

def main():
    # Add arguments to script
    parser = argparse.ArgumentParser()

    parser.add_argument('--C', type=float, default=1.0, help="Inverse of regularization strength. Smaller values cause stronger regularization")
    parser.add_argument('--max_iter', type=int, default=100, help="Maximum number of iterations to converge")

    args = parser.parse_args()

    run.log("Regularization Strength:", np.float(args.C))
    run.log("Max iterations:", np.int(args.max_iter))

   

    model = LogisticRegression(C=args.C, max_iter=args.max_iter).fit(x_train, y_train)

    accuracy = model.score(x_test, y_test)
    run.log("Accuracy", np.float(accuracy))

if __name__ == '__main__':
    main()


for pip_package in ["scikit-learn"]:
    env.python.conda_dependencies.add_pip_package(pip_package)
    
    ##writefile score.py
import pickle
import json
import numpy 
from sklearn.externals import joblib
from sklearn.tree import DecisionTreeClassifier
from azureml.core.model import Model
import time

def init():
    global model
    
    model_path = Model.get_model_path('best-model')
    model = joblib.load(model_path)


def run(data):
    try:
        data = np.array(json.loads(data))
        result = model.predict(data)
# You can return any data type, as long as it is JSON serializable.
        return result.tolist()
    except Exception as e:
        error = str(e)
        return error
